package signin;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author HP
 */
// Generated by Selenium IDE
import driver.Watcher;
import driver.ClientDriver;
import static driver.ClientDriver.testRailReport;
import static driver.ClientDriver.testrail;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import static org.junit.Assert.assertTrue;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runners.MethodSorters;
import testrail.APIException;
import testrail.TestRailManager;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class SigninLayout {

    String testCaseId;
    String testRunId = "62";//Signin -Automated test cases
    @Rule
    public Watcher watcher = new Watcher(ClientDriver.driver);

    @BeforeClass
    public static void delay() {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("SigninLayout Delay 1 seconds applied ");
    }

//    @Test
//    public void emailAddressFiledIsDisplayed() throws IOException, MalformedURLException, APIException, AssertionError {
//        assertTrue(!SigninPOM.emailAddressFiled().isDisplayed());
//        if(testRailReport){testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);}
////      estrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
//    }
    @Test
    public void emailAddressFiledIsDisplayed() {
        testCaseId = "3826";
        try {
            assertTrue(SigninPOM.emailAddressFiled().isDisplayed());
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (IOException | APIException | AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    @Test
    public void emailAddressFiledIsFocused() {
        testCaseId = "3771";
        try {
            assert (SigninPOM.emailAddressFiled().equals(ClientDriver.base.getFocusedElement()));
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void createNewAccountOptionIsDisplayed() {
        testCaseId = "3772";
        try {
            assert (SigninPOM.createNewAccountOption().isDisplayed());
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void passwordFieldIsDisplayed() {
        testCaseId = "3773";
        try {
            assert (SigninPOM.passwordField().isDisplayed());
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void passwordFieldIsEmpty() {
        testCaseId = "3774";

        try {
            assert (SigninPOM.passwordField().getText().isEmpty());
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void rememberMeOptionIsDisaplyed() {
        testCaseId = "3775";

        try {
            assert (SigninPOM.rememberMeOption().isDisplayed());
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void rememberMeOptionIsNotSelected() {
        testCaseId = "3776";

        try {
            assert (!SigninPOM.rememberMeOption().isSelected());
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void rememberMeTextIsCorrect() {
        testCaseId = "3777";

        try {
            assert (SigninPOM.rememberMeText().getText().equals("Remember me next time"));
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void forgetPasswordOptionIsDisaplyed() {
        testCaseId = "3778";

        try {
            assert (SigninPOM.forgetPasswordOption().isDisplayed());
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void sloganTextIsDisplayed() {
        testCaseId = "3779";
        try {
            assert (SigninPOM.sloganText().isDisplayed());
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void sloganTextIsCorrect() {
        testCaseId = "3780";

        try {
            assert (SigninPOM.sloganText().getText().equals("We connect professionals with best opportunities"));
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void loginButtonIsDisplayed() {
        testCaseId = "3781";

        try {
            assert (SigninPOM.loginButton().isDisplayed());
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void loginButtonTextIsCorrect() {
        testCaseId = "3782";
        try {
            assert (SigninPOM.loginButton().getText().equals("LOGIN"));
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void loginTitleIsIsCorrect() {
        testCaseId = "3783";
        try {
            assert (SigninPOM.loginTitle().getText().equals("LOGIN"));
            if (testRailReport) {
                testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);
            }
        } catch (AssertionError e) {
            try {
                if (testRailReport) {
                    testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);
                }
                assertTrue(false);
            } catch (IOException | APIException ex) {
                Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | APIException ex) {
            Logger.getLogger(SigninLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

//    public void test(WebElement element, String testRunId, String testCaseId) {
//        try {
//            assertTrue(!element.isDisplayed());
//            if(testRailReport){testrail.setResult(testRunId, testCaseId, TestRailManager.PASSED);}
//        } catch (IOException | APIException | AssertionError e) {
//            try {
//               if(testRailReport){testrail.setResult(testRunId, testCaseId, TestRailManager.FAILED);}
    //             assertTrue(false);
//
//
//} catch (IOException | APIException ex) {
//                Logger.getLogger(SigninLayout.class
//.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//    }
}
